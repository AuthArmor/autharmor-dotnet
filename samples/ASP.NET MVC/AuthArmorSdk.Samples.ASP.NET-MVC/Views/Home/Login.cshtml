@using Microsoft.Extensions.Options
@using AuthArmorSdk.Samples.ASP.NET_MVC.Configuration

@inject IOptions<AuthArmorClientConfiguration> ClientConfigurationOptions

@section styles {
    <link rel="stylesheet" href="https://cdn.autharmor.com/scripts/autharmor-js-ui/4.0.0-alpha.6/global/autharmor.css">
}

@section scripts {
    <script src="https://cdn.autharmor.com/scripts/autharmor-js/4.0.0-alpha.6/global/autharmor.js"></script>
    <script src="https://cdn.autharmor.com/scripts/autharmor-js-ui/4.0.0-alpha.6/global/autharmor-ui.js"></script>
    <script>
        const config = {
            clientSdkApiKey: "@ClientConfigurationOptions.Value.ClientSdkApiKey",
            webAuthnClientId: "@ClientConfigurationOptions.Value.WebAuthnClientId"
        };

        const interactiveConfig = {
            defaultAuthenticateOptions: {
                timeoutSeconds: 90
            },
            defaultAuthenticatorAuthenticateOptions: {
                actionName: "Auth Armor SDK Demo Site - Login",
                shortMessage: "Auth Armor SDK Demo site login pending, please approve",
            },
            defaultMagicLinkEmailAuthenticateOptions: {
                actionName: "Auth Armor SDK Demo Site - Magic Link Login",
                shortMessage: "Auth Armor SDK Demo site login pending, please approve",
            },
            defaultRegisterOptions: {
                timeoutSeconds: 300
            },
            defaultMagicLinkEmailRegisterOptions: {
                actionName: "Verify Email and Register",
                shortMessage: "Auth Armor SDK Demo site registration pending, please verify you email and register"
            },
            defaultMagicLinkEmailLogInRedirectUrl: "@ClientConfigurationOptions.Value.RedirectBaseUrl/magiclinkemail-auth",
            defaultMagicLinkEmailRegisterRedirectUrl: "@ClientConfigurationOptions.Value.RedirectBaseUrl/magiclinkemail-register"
        };

        const client = new authArmor.AuthArmorClient(config);
        
        const form = document.getElementById("form");

        form.client = client;
        form.interactiveConfig = interactiveConfig;

        form.addEventListener("logIn", ({ authenticationResult }) => {
            //set form data
            document.querySelector(`input[name='AuthRequest_Id']`).value = authenticationResult.requestId;
            document.querySelector(`input[name='AuthValidationToken']`).value = authenticationResult.validationToken;
            document.querySelector(`input[name='AuthMethod']`).value = authenticationResult.authenticationMethod;
            //submit the form
            document.querySelector(".validateAuth-form").submit();
        });

        form.addEventListener("register", ({ registrationResult }) => {
            //setting form data
            document.querySelector(`input[name='User_Id']`).value = registrationResult.userId;
            document.querySelector(`input[name='Username']`).value = registrationResult.username;
            //submit the form
            document.querySelector(".registerSuccess-form").submit();
        });
    </script>
}

<section class="section columns">
    <autharmor-form id="form" class="column is-two-fifths"></autharmor-form>
</section>

@*Hidden form to validate auth - using a form to make things easy and work with AntiForgeryToken*@
<form class="validateAuth-form hidden" asp-controller="Home" asp-action="ValidateAuthArmorAuth">
    @Html.AntiForgeryToken()
    <input type="hidden" name="AuthRequest_Id" />
    <input type="hidden" name="AuthValidationToken" />
    <input type="hidden" name="AuthMethod" />
</form>
@*Hidden form to register a new user - using a form to make things easy and work with AntiForgeryToken*@
<form class="registerSuccess-form hidden" asp-controller="Home" asp-action="UserRegisterSuccess">
    @Html.AntiForgeryToken()
    <input type="hidden" name="User_Id" />
    <input type="hidden" name="Username" />        
</form>
